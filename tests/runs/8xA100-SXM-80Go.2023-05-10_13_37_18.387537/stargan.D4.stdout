Namespace(c_dim=5, c2_dim=8, celeba_crop_size=178, rafd_crop_size=256, image_size=512, g_conv_dim=64, d_conv_dim=64, g_repeat_num=6, d_repeat_num=6, lambda_cls=1, lambda_rec=10, lambda_gp=10, dataset='synth', batch_size=16, num_iters=200000, num_iters_decay=100000, g_lr=0.0001, d_lr=0.0001, n_critic=5, beta1=0.5, beta2=0.999, resume_iters=None, selected_attrs=['Black_Hair', 'Blond_Hair', 'Brown_Hair', 'Male', 'Young'], test_iters=200000, num_workers=1, mode='train', use_tensorboard=False, celeba_image_dir='data/celeba/images', attr_path='data/celeba/list_attr_celeba.txt', rafd_image_dir='data/RaFD/train', log_dir='/Tmp/slurm.3188069.0/milabench_dev/results/extra/stargan/logs', model_save_dir='/Tmp/slurm.3188069.0/milabench_dev/results/extra/stargan/models', sample_dir='/Tmp/slurm.3188069.0/milabench_dev/results/extra/stargan/samples', result_dir='/Tmp/slurm.3188069.0/milabench_dev/results/extra/stargan/results', log_step=10, sample_step=1000, model_save_step=10000, lr_update_step=1000)
Generator(
  (main): Sequential(
    (0): Conv2d(8, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (4): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (7): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU(inplace=True)
    (9): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (16): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (17): ReLU(inplace=True)
    (18): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (19): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (20): ReLU(inplace=True)
    (21): Conv2d(64, 3, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (22): Tanh()
  )
)
G
The number of parameters: 8430528
Discriminator(
  (main): Sequential(
    (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.01)
    (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (3): LeakyReLU(negative_slope=0.01)
    (4): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (5): LeakyReLU(negative_slope=0.01)
    (6): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (7): LeakyReLU(negative_slope=0.01)
    (8): Conv2d(512, 1024, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (9): LeakyReLU(negative_slope=0.01)
    (10): Conv2d(1024, 2048, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (11): LeakyReLU(negative_slope=0.01)
  )
  (conv1): Conv2d(2048, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv2): Conv2d(2048, 5, kernel_size=(8, 8), stride=(1, 1), bias=False)
)
D
The number of parameters: 45376448
Start training...
Elapsed [0:00:36], Iteration [10/200000], D/loss_real: -1.5106, D/loss_fake: 0.3922, D/loss_cls: 4.1539, D/loss_gp: 0.0091, G/loss_fake: 0.4652, G/loss_rec: 0.5379, G/loss_cls: 3.1724
Elapsed [0:00:39], Iteration [20/200000], D/loss_real: -4.6737, D/loss_fake: 1.6530, D/loss_cls: 3.8608, D/loss_gp: 0.2425, G/loss_fake: -0.7301, G/loss_rec: 0.5295, G/loss_cls: 3.3498
Elapsed [0:00:42], Iteration [30/200000], D/loss_real: -3.5035, D/loss_fake: 0.9735, D/loss_cls: 3.7755, D/loss_gp: 0.0121, G/loss_fake: -0.6062, G/loss_rec: 0.5337, G/loss_cls: 3.2220
Elapsed [0:00:46], Iteration [40/200000], D/loss_real: -2.4045, D/loss_fake: 0.9415, D/loss_cls: 4.1900, D/loss_gp: 0.2186, G/loss_fake: -0.7150, G/loss_rec: 0.5194, G/loss_cls: 3.4114
Elapsed [0:00:49], Iteration [50/200000], D/loss_real: -5.4069, D/loss_fake: 2.5006, D/loss_cls: 3.0941, D/loss_gp: 0.0136, G/loss_fake: -2.6779, G/loss_rec: 0.5109, G/loss_cls: 3.1382
Elapsed [0:00:52], Iteration [60/200000], D/loss_real: -5.3636, D/loss_fake: 2.4502, D/loss_cls: 3.0624, D/loss_gp: 0.0187, G/loss_fake: -2.3108, G/loss_rec: 0.5253, G/loss_cls: 3.1779
Elapsed [0:00:56], Iteration [70/200000], D/loss_real: -5.3128, D/loss_fake: 3.1919, D/loss_cls: 3.0610, D/loss_gp: 0.0055, G/loss_fake: -3.2925, G/loss_rec: 0.5320, G/loss_cls: 3.1153
Elapsed [0:00:59], Iteration [80/200000], D/loss_real: -5.3584, D/loss_fake: 3.8230, D/loss_cls: 3.0506, D/loss_gp: 0.0154, G/loss_fake: -3.4115, G/loss_rec: 0.5514, G/loss_cls: 3.1131
Elapsed [0:01:02], Iteration [90/200000], D/loss_real: -6.1075, D/loss_fake: 4.3828, D/loss_cls: 3.1437, D/loss_gp: 0.0616, G/loss_fake: -2.1981, G/loss_rec: 0.5996, G/loss_cls: 3.2584
Elapsed [0:01:06], Iteration [100/200000], D/loss_real: -5.5241, D/loss_fake: 4.6003, D/loss_cls: 3.4015, D/loss_gp: 0.0128, G/loss_fake: -4.7758, G/loss_rec: 0.5650, G/loss_cls: 4.0898
Elapsed [0:01:09], Iteration [110/200000], D/loss_real: -2.1651, D/loss_fake: 1.0805, D/loss_cls: 3.0761, D/loss_gp: 0.0506, G/loss_fake: -0.8206, G/loss_rec: 0.5622, G/loss_cls: 3.1980
Elapsed [0:01:12], Iteration [120/200000], D/loss_real: -1.9060, D/loss_fake: 0.2773, D/loss_cls: 3.0269, D/loss_gp: 0.0048, G/loss_fake: 0.0349, G/loss_rec: 0.5378, G/loss_cls: 3.2043
Elapsed [0:01:15], Iteration [130/200000], D/loss_real: -4.2586, D/loss_fake: 2.4778, D/loss_cls: 3.2812, D/loss_gp: 0.0134, G/loss_fake: -1.9054, G/loss_rec: 0.5302, G/loss_cls: 3.1843
Elapsed [0:01:19], Iteration [140/200000], D/loss_real: -3.4082, D/loss_fake: 2.8678, D/loss_cls: 3.0729, D/loss_gp: 0.0015, G/loss_fake: -3.2190, G/loss_rec: 0.5245, G/loss_cls: 3.0895
Elapsed [0:01:22], Iteration [150/200000], D/loss_real: -1.6644, D/loss_fake: 1.0970, D/loss_cls: 3.3667, D/loss_gp: 0.3122, G/loss_fake: -1.0545, G/loss_rec: 0.5306, G/loss_cls: 3.3801
Elapsed [0:01:25], Iteration [160/200000], D/loss_real: -2.5266, D/loss_fake: 1.2353, D/loss_cls: 3.0641, D/loss_gp: 0.0147, G/loss_fake: -0.9856, G/loss_rec: 0.5152, G/loss_cls: 3.1805
Elapsed [0:01:29], Iteration [170/200000], D/loss_real: -0.7824, D/loss_fake: 0.5762, D/loss_cls: 3.0753, D/loss_gp: 0.0383, G/loss_fake: -0.4027, G/loss_rec: 0.5084, G/loss_cls: 3.1098
Elapsed [0:01:32], Iteration [180/200000], D/loss_real: -0.7493, D/loss_fake: 0.4617, D/loss_cls: 3.2398, D/loss_gp: 0.5927, G/loss_fake: -1.6406, G/loss_rec: 0.5059, G/loss_cls: 3.1379
Elapsed [0:01:35], Iteration [190/200000], D/loss_real: -0.6485, D/loss_fake: 0.4266, D/loss_cls: 3.1144, D/loss_gp: 0.4368, G/loss_fake: -0.7904, G/loss_rec: 0.5102, G/loss_cls: 3.0902
Elapsed [0:01:39], Iteration [200/200000], D/loss_real: 0.6398, D/loss_fake: -1.8968, D/loss_cls: 3.0979, D/loss_gp: 0.0801, G/loss_fake: 0.4735, G/loss_rec: 0.5153, G/loss_cls: 3.0938
