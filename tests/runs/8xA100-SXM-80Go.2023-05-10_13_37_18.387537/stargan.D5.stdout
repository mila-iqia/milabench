Namespace(c_dim=5, c2_dim=8, celeba_crop_size=178, rafd_crop_size=256, image_size=512, g_conv_dim=64, d_conv_dim=64, g_repeat_num=6, d_repeat_num=6, lambda_cls=1, lambda_rec=10, lambda_gp=10, dataset='synth', batch_size=16, num_iters=200000, num_iters_decay=100000, g_lr=0.0001, d_lr=0.0001, n_critic=5, beta1=0.5, beta2=0.999, resume_iters=None, selected_attrs=['Black_Hair', 'Blond_Hair', 'Brown_Hair', 'Male', 'Young'], test_iters=200000, num_workers=1, mode='train', use_tensorboard=False, celeba_image_dir='data/celeba/images', attr_path='data/celeba/list_attr_celeba.txt', rafd_image_dir='data/RaFD/train', log_dir='/Tmp/slurm.3188069.0/milabench_dev/results/extra/stargan/logs', model_save_dir='/Tmp/slurm.3188069.0/milabench_dev/results/extra/stargan/models', sample_dir='/Tmp/slurm.3188069.0/milabench_dev/results/extra/stargan/samples', result_dir='/Tmp/slurm.3188069.0/milabench_dev/results/extra/stargan/results', log_step=10, sample_step=1000, model_save_step=10000, lr_update_step=1000)
Generator(
  (main): Sequential(
    (0): Conv2d(8, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (4): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (7): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU(inplace=True)
    (9): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (16): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (17): ReLU(inplace=True)
    (18): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (19): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (20): ReLU(inplace=True)
    (21): Conv2d(64, 3, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (22): Tanh()
  )
)
G
The number of parameters: 8430528
Discriminator(
  (main): Sequential(
    (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.01)
    (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (3): LeakyReLU(negative_slope=0.01)
    (4): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (5): LeakyReLU(negative_slope=0.01)
    (6): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (7): LeakyReLU(negative_slope=0.01)
    (8): Conv2d(512, 1024, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (9): LeakyReLU(negative_slope=0.01)
    (10): Conv2d(1024, 2048, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (11): LeakyReLU(negative_slope=0.01)
  )
  (conv1): Conv2d(2048, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv2): Conv2d(2048, 5, kernel_size=(8, 8), stride=(1, 1), bias=False)
)
D
The number of parameters: 45376448
Start training...
Elapsed [0:00:35], Iteration [10/200000], D/loss_real: -1.7419, D/loss_fake: 0.2235, D/loss_cls: 3.3988, D/loss_gp: 0.0198, G/loss_fake: -0.5654, G/loss_rec: 0.5410, G/loss_cls: 3.4092
Elapsed [0:00:39], Iteration [20/200000], D/loss_real: 0.2998, D/loss_fake: -0.7830, D/loss_cls: 3.8072, D/loss_gp: 0.0290, G/loss_fake: -0.6434, G/loss_rec: 0.5297, G/loss_cls: 3.4552
Elapsed [0:00:42], Iteration [30/200000], D/loss_real: -4.0364, D/loss_fake: 1.1259, D/loss_cls: 3.4636, D/loss_gp: 0.0232, G/loss_fake: -1.3070, G/loss_rec: 0.5263, G/loss_cls: 3.4598
Elapsed [0:00:45], Iteration [40/200000], D/loss_real: -7.4097, D/loss_fake: 3.3243, D/loss_cls: 3.7901, D/loss_gp: 0.2912, G/loss_fake: -1.0427, G/loss_rec: 0.5213, G/loss_cls: 3.5743
Elapsed [0:00:49], Iteration [50/200000], D/loss_real: -3.8521, D/loss_fake: 1.7452, D/loss_cls: 3.9500, D/loss_gp: 0.0115, G/loss_fake: -2.5549, G/loss_rec: 0.5136, G/loss_cls: 3.4946
Elapsed [0:00:52], Iteration [60/200000], D/loss_real: -6.4582, D/loss_fake: 3.3609, D/loss_cls: 3.2633, D/loss_gp: 0.0744, G/loss_fake: -2.0828, G/loss_rec: 0.5177, G/loss_cls: 3.4988
Elapsed [0:00:55], Iteration [70/200000], D/loss_real: -6.5806, D/loss_fake: 4.0972, D/loss_cls: 3.1472, D/loss_gp: 0.0315, G/loss_fake: -3.2148, G/loss_rec: 0.5149, G/loss_cls: 3.4904
Elapsed [0:00:58], Iteration [80/200000], D/loss_real: -3.3576, D/loss_fake: 2.2323, D/loss_cls: 3.4935, D/loss_gp: 0.0944, G/loss_fake: -2.6347, G/loss_rec: 0.5239, G/loss_cls: 3.4255
Elapsed [0:01:02], Iteration [90/200000], D/loss_real: -5.4420, D/loss_fake: 4.0849, D/loss_cls: 3.0836, D/loss_gp: 0.0012, G/loss_fake: -4.3381, G/loss_rec: 0.5297, G/loss_cls: 3.4426
Elapsed [0:01:05], Iteration [100/200000], D/loss_real: -4.1171, D/loss_fake: 3.4249, D/loss_cls: 3.3868, D/loss_gp: 0.0395, G/loss_fake: -3.7593, G/loss_rec: 0.5451, G/loss_cls: 3.3586
Elapsed [0:01:08], Iteration [110/200000], D/loss_real: -5.8298, D/loss_fake: 4.1137, D/loss_cls: 2.8469, D/loss_gp: 0.1244, G/loss_fake: -0.9971, G/loss_rec: 0.5610, G/loss_cls: 3.4675
Elapsed [0:01:12], Iteration [120/200000], D/loss_real: -2.6003, D/loss_fake: 1.7783, D/loss_cls: 3.0629, D/loss_gp: 0.0427, G/loss_fake: -0.8705, G/loss_rec: 0.5397, G/loss_cls: 3.4112
Elapsed [0:01:15], Iteration [130/200000], D/loss_real: -2.4177, D/loss_fake: 1.8311, D/loss_cls: 2.8087, D/loss_gp: 0.0003, G/loss_fake: -1.9963, G/loss_rec: 0.5375, G/loss_cls: 3.3608
Elapsed [0:01:18], Iteration [140/200000], D/loss_real: -8.4247, D/loss_fake: 7.5053, D/loss_cls: 4.1219, D/loss_gp: 0.3171, G/loss_fake: -0.9848, G/loss_rec: 0.5266, G/loss_cls: 3.8804
Elapsed [0:01:22], Iteration [150/200000], D/loss_real: -3.1343, D/loss_fake: 2.1154, D/loss_cls: 3.3237, D/loss_gp: 0.0593, G/loss_fake: -1.5475, G/loss_rec: 0.5394, G/loss_cls: 3.3958
Elapsed [0:01:25], Iteration [160/200000], D/loss_real: -2.3099, D/loss_fake: 1.9353, D/loss_cls: 3.3064, D/loss_gp: 0.0026, G/loss_fake: -1.8961, G/loss_rec: 0.5201, G/loss_cls: 3.3690
Elapsed [0:01:28], Iteration [170/200000], D/loss_real: -1.7847, D/loss_fake: 0.5702, D/loss_cls: 3.2712, D/loss_gp: 0.0086, G/loss_fake: -0.6707, G/loss_rec: 0.5178, G/loss_cls: 3.3980
Elapsed [0:01:32], Iteration [180/200000], D/loss_real: -1.8712, D/loss_fake: 0.9729, D/loss_cls: 3.2079, D/loss_gp: 0.0003, G/loss_fake: -0.8374, G/loss_rec: 0.5061, G/loss_cls: 3.3650
Elapsed [0:01:35], Iteration [190/200000], D/loss_real: -2.0314, D/loss_fake: 1.2747, D/loss_cls: 3.3794, D/loss_gp: 0.0521, G/loss_fake: -2.1233, G/loss_rec: 0.5001, G/loss_cls: 3.5892
Elapsed [0:01:38], Iteration [200/200000], D/loss_real: -4.0812, D/loss_fake: 3.7978, D/loss_cls: 7.9036, D/loss_gp: 0.1151, G/loss_fake: 0.7168, G/loss_rec: 0.5063, G/loss_cls: 8.8202
