Namespace(c_dim=5, c2_dim=8, celeba_crop_size=178, rafd_crop_size=256, image_size=512, g_conv_dim=64, d_conv_dim=64, g_repeat_num=6, d_repeat_num=6, lambda_cls=1, lambda_rec=10, lambda_gp=10, dataset='synth', batch_size=16, num_iters=200000, num_iters_decay=100000, g_lr=0.0001, d_lr=0.0001, n_critic=5, beta1=0.5, beta2=0.999, resume_iters=None, selected_attrs=['Black_Hair', 'Blond_Hair', 'Brown_Hair', 'Male', 'Young'], test_iters=200000, num_workers=1, mode='train', use_tensorboard=False, celeba_image_dir='data/celeba/images', attr_path='data/celeba/list_attr_celeba.txt', rafd_image_dir='data/RaFD/train', log_dir='/Tmp/slurm.3188069.0/milabench_dev/results/extra/stargan/logs', model_save_dir='/Tmp/slurm.3188069.0/milabench_dev/results/extra/stargan/models', sample_dir='/Tmp/slurm.3188069.0/milabench_dev/results/extra/stargan/samples', result_dir='/Tmp/slurm.3188069.0/milabench_dev/results/extra/stargan/results', log_step=10, sample_step=1000, model_save_step=10000, lr_update_step=1000)
Generator(
  (main): Sequential(
    (0): Conv2d(8, 64, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (1): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (4): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
    (6): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (7): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (8): ReLU(inplace=True)
    (9): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (10): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (11): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (12): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (13): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (14): ResidualBlock(
      (main): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (15): ConvTranspose2d(256, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (16): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (17): ReLU(inplace=True)
    (18): ConvTranspose2d(128, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
    (19): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (20): ReLU(inplace=True)
    (21): Conv2d(64, 3, kernel_size=(7, 7), stride=(1, 1), padding=(3, 3), bias=False)
    (22): Tanh()
  )
)
G
The number of parameters: 8430528
Discriminator(
  (main): Sequential(
    (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (1): LeakyReLU(negative_slope=0.01)
    (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (3): LeakyReLU(negative_slope=0.01)
    (4): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (5): LeakyReLU(negative_slope=0.01)
    (6): Conv2d(256, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (7): LeakyReLU(negative_slope=0.01)
    (8): Conv2d(512, 1024, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (9): LeakyReLU(negative_slope=0.01)
    (10): Conv2d(1024, 2048, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
    (11): LeakyReLU(negative_slope=0.01)
  )
  (conv1): Conv2d(2048, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
  (conv2): Conv2d(2048, 5, kernel_size=(8, 8), stride=(1, 1), bias=False)
)
D
The number of parameters: 45376448
Start training...
Elapsed [0:00:36], Iteration [10/200000], D/loss_real: -2.9718, D/loss_fake: 0.2569, D/loss_cls: 3.3656, D/loss_gp: 0.0662, G/loss_fake: -0.1201, G/loss_rec: 0.5505, G/loss_cls: 3.2645
Elapsed [0:00:39], Iteration [20/200000], D/loss_real: -4.6554, D/loss_fake: 1.7541, D/loss_cls: 3.3565, D/loss_gp: 0.0209, G/loss_fake: -2.7480, G/loss_rec: 0.5275, G/loss_cls: 4.1604
Elapsed [0:00:43], Iteration [30/200000], D/loss_real: -0.7054, D/loss_fake: -0.1966, D/loss_cls: 3.4735, D/loss_gp: 0.0505, G/loss_fake: 0.6329, G/loss_rec: 0.5203, G/loss_cls: 4.2565
Elapsed [0:00:46], Iteration [40/200000], D/loss_real: -2.4643, D/loss_fake: 0.2167, D/loss_cls: 3.1889, D/loss_gp: 0.0181, G/loss_fake: -0.6090, G/loss_rec: 0.5316, G/loss_cls: 3.3398
Elapsed [0:00:49], Iteration [50/200000], D/loss_real: -3.0044, D/loss_fake: 0.7382, D/loss_cls: 3.1849, D/loss_gp: 0.0288, G/loss_fake: -0.8010, G/loss_rec: 0.5167, G/loss_cls: 3.4004
Elapsed [0:00:53], Iteration [60/200000], D/loss_real: -3.6339, D/loss_fake: 0.9998, D/loss_cls: 3.3384, D/loss_gp: 0.0094, G/loss_fake: -0.8422, G/loss_rec: 0.5133, G/loss_cls: 3.3344
Elapsed [0:00:56], Iteration [70/200000], D/loss_real: -5.1941, D/loss_fake: 2.3645, D/loss_cls: 3.2129, D/loss_gp: 0.0229, G/loss_fake: -2.3315, G/loss_rec: 0.5118, G/loss_cls: 3.2907
Elapsed [0:00:59], Iteration [80/200000], D/loss_real: -5.8259, D/loss_fake: 3.1225, D/loss_cls: 3.2710, D/loss_gp: 0.0408, G/loss_fake: -2.2091, G/loss_rec: 0.5282, G/loss_cls: 3.3543
Elapsed [0:01:03], Iteration [90/200000], D/loss_real: -4.9031, D/loss_fake: 3.5353, D/loss_cls: 3.2294, D/loss_gp: 0.0008, G/loss_fake: -4.0943, G/loss_rec: 0.5338, G/loss_cls: 3.2372
Elapsed [0:01:06], Iteration [100/200000], D/loss_real: -3.4529, D/loss_fake: 2.1163, D/loss_cls: 3.2045, D/loss_gp: 0.0412, G/loss_fake: -5.1538, G/loss_rec: 0.5951, G/loss_cls: 3.2706
Elapsed [0:01:09], Iteration [110/200000], D/loss_real: -0.4676, D/loss_fake: 0.1319, D/loss_cls: 3.2090, D/loss_gp: 0.0015, G/loss_fake: 0.0632, G/loss_rec: 0.5628, G/loss_cls: 3.2525
Elapsed [0:01:13], Iteration [120/200000], D/loss_real: 1.2069, D/loss_fake: -1.2791, D/loss_cls: 3.2543, D/loss_gp: 0.0675, G/loss_fake: 3.6498, G/loss_rec: 0.5367, G/loss_cls: 4.2308
Elapsed [0:01:16], Iteration [130/200000], D/loss_real: -1.9124, D/loss_fake: 0.4420, D/loss_cls: 3.2313, D/loss_gp: 0.1592, G/loss_fake: 0.0335, G/loss_rec: 0.5253, G/loss_cls: 3.4051
Elapsed [0:01:19], Iteration [140/200000], D/loss_real: -2.2243, D/loss_fake: 0.5404, D/loss_cls: 3.4630, D/loss_gp: 0.0333, G/loss_fake: -0.0566, G/loss_rec: 0.5150, G/loss_cls: 3.4015
Elapsed [0:01:22], Iteration [150/200000], D/loss_real: -3.3961, D/loss_fake: 2.7807, D/loss_cls: 3.3142, D/loss_gp: 0.0005, G/loss_fake: -2.4269, G/loss_rec: 0.5117, G/loss_cls: 3.2384
Elapsed [0:01:26], Iteration [160/200000], D/loss_real: -4.1816, D/loss_fake: 3.4332, D/loss_cls: 3.1914, D/loss_gp: 0.0026, G/loss_fake: -3.3735, G/loss_rec: 0.5020, G/loss_cls: 3.2437
Elapsed [0:01:29], Iteration [170/200000], D/loss_real: -3.8133, D/loss_fake: 2.7424, D/loss_cls: 3.2974, D/loss_gp: 0.0020, G/loss_fake: -2.4761, G/loss_rec: 0.5024, G/loss_cls: 3.3857
Elapsed [0:01:32], Iteration [180/200000], D/loss_real: -3.1950, D/loss_fake: 2.7348, D/loss_cls: 3.5239, D/loss_gp: 0.0100, G/loss_fake: -2.5970, G/loss_rec: 0.5135, G/loss_cls: 3.2446
Elapsed [0:01:36], Iteration [190/200000], D/loss_real: -1.9960, D/loss_fake: 1.0825, D/loss_cls: 3.2803, D/loss_gp: 0.0333, G/loss_fake: -1.0361, G/loss_rec: 0.4997, G/loss_cls: 3.2907
Elapsed [0:01:39], Iteration [200/200000], D/loss_real: -0.9883, D/loss_fake: 0.4638, D/loss_cls: 3.1108, D/loss_gp: 0.0030, G/loss_fake: -0.6811, G/loss_rec: 0.4981, G/loss_cls: 3.2393
