"""Add weight table

Revision ID: 94b7d2c950a4
Revises: a6cc5cdcdce2
Create Date: 2025-05-30 09:50:25.487411

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '94b7d2c950a4'
down_revision: Union[str, None] = 'a6cc5cdcdce2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('weights',
    sa.Column('_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('profile', sa.String(length=256), nullable=False),
    sa.Column('pack', sa.String(length=256), nullable=False),
    sa.Column('weight', sa.Integer(), nullable=False, default=0),
    sa.Column('priority', sa.Integer(), nullable=False, default=0),
    sa.Column('enabled', sa.Boolean(), nullable=False, default=False),
    sa.Column('group1', sa.String(length=256), nullable=True),
    sa.Column('group2', sa.String(length=256), nullable=True),
    sa.Column('group3', sa.String(length=256), nullable=True),
    sa.Column('group4', sa.String(length=256), nullable=True),
    sa.PrimaryKeyConstraint('_id')
    )
    op.create_unique_constraint('uq_profile_pack', 'weights', ['profile', 'pack'])
    op.create_index('weight_profile_pack', 'weights', ['profile', 'pack'], unique=False)
    op.drop_index(op.f('execs_meta_gpus_0_product_idx'), table_name='execs')
    op.create_index('execs_meta_gpus_0_product_idx', 'execs', [sa.literal_column("(meta -> 'accelerators' -> 'gpus' -> '0' ->> 'product')")], unique=False, postgresql_using='btree')
    # ### end Alembic commands ###

    # Insert default weights
    op.execute("""
        INSERT INTO 
            weights (profile, weight, priority, pack, enabled, group1, group2)
        VALUES 
            ('default', 0, 1000, 'fp16', TRUE, 'SYNTHETIC', 'FLOPS'),
            ('default', 0, 1001, 'bf16', TRUE, 'SYNTHETIC', 'FLOPS'),
            ('default', 0, 1002, 'tf32', TRUE, 'SYNTHETIC', 'FLOPS'),
            ('default', 0, 1003, 'fp32', TRUE, 'SYNTHETIC', 'FLOPS'),
            ('default', 0, 2201, 'convnext_large-fp32', TRUE, 'CV', 'CONVNET'),
            ('default', 0, 2202, 'convnext_large-fp16', TRUE, 'CV', 'CONVNET'),
            ('default', 0, 2203, 'convnext_large-tf32', TRUE, 'CV', 'CONVNET'),
            ('default', 1, 2204, 'convnext_large-tf32-fp16', TRUE, 'CV', 'CONVNET'),
            ('default', 1, 2205, 'resnet50', TRUE, 'CV', 'CONVNET'),
            ('default', 0, 2206, 'resnet50-noio', TRUE, 'CV', 'CONVNET'),
            ('default', 0, 2207, 'resnet152-ddp-gpus', TRUE, 'CV', 'CONVNET'),
            ('default', 1, 2208, 'regnet_y_128gf', TRUE, 'CV', 'CONVNET'),
            ('default', 0, 2209, 'lightning', TRUE, 'CV', 'CONVNET'),
            ('default', 1, 2210, 'lightning-gpus', TRUE, 'CV', 'CONVNET'),
            ('default', 0, 2211, 'focalnet', TRUE, 'CV', 'CONVNET'),
            ('default', 0, 2012, 'diffusion-single', TRUE, 'CV', 'DIFFUSION'),
            ('default', 1, 2013, 'diffusion-gpus', TRUE, 'CV', 'DIFFUSION'),
            ('default', 1, 2014, 'diffusion-nodes', FALSE, 'CV', 'DIFFUSION'),
            ('default', 0, 2101, 'dinov2-giant-single', TRUE, 'CV', 'TRANSFORMER'),
            ('default', 1, 2102, 'dinov2-giant-gpus', TRUE, 'CV', 'TRANSFORMER'),
            ('default', 0, 2103, 'dinov2-giant-nodes', FALSE, 'CV', 'TRANSFORMER'),
            ('default', 1, 2104, 'llava-single', TRUE, 'CV', 'TRANSFORMER'),
            ('default', 0, 2105, 'llava-gpus', FALSE, 'CV', 'TRANSFORMER'),
            ('default', 1, 2106, 'vjepa-single', TRUE, 'CV', 'TRANSFORMER'),
            ('default', 1, 2107, 'vjepa-gpus', TRUE, 'CV', 'TRANSFORMER'),
            ('default', 0, 3100, 'bert-fp32', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 0, 3101, 'bert-fp16', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 0, 3102, 'bert-tf32', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 1, 3103, 'bert-tf32-fp16', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 0, 3104, 't5', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 1, 3105, 'reformer', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 0, 3106, 'whisper', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 1, 3107, 'llama', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 1, 3108, 'llm-lora-single', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 1, 3109, 'llm-lora-ddp-gpus', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 1, 3110, 'llm-lora-ddp-nodes', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 1, 3111, 'llm-lora-mp-gpus', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 1, 3112, 'llm-full-mp-gpus', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 1, 3113, 'llm-full-mp-nodes', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 1, 3114, 'rlhf-single', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 0, 3115, 'rlhf-gpus', TRUE, 'NLP', 'TRANSFORMER'),
            ('default', 1, 4201, 'torchatari', TRUE, 'RL', 'CONVNET'),
            ('default', 1, 4302, 'brax', TRUE, 'RL', 'MLP'),
            ('default', 0, 4303, 'dqn', TRUE, 'RL', 'MLP'),
            ('default', 1, 4304, 'ppo', TRUE, 'RL', 'MLP'),
            ('default', 0, 4305, 'cleanrljax', FALSE, 'RL', 'MLP'),
            ('default', 1, 5000, 'pna', TRUE, 'GRAPHS', 'GNN'),
            ('default', 1, 5001, 'dimenet', TRUE, 'GRAPHS', 'GNN'),
            ('default', 1, 5002, 'recursiongfn', TRUE, 'GRAPHS', 'GFlow')
            ;
    """)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('execs_meta_gpus_0_product_idx', table_name='execs', postgresql_using='btree')
    op.create_index(op.f('execs_meta_gpus_0_product_idx'), 'execs', [sa.literal_column("((((meta -> 'accelerators'::text) -> 'gpus'::text) -> '0'::text) ->> 'product'::text)")], unique=False)
    op.drop_index('weight_profile_pack', table_name='weights')
    op.drop_table('weights')
    # ### end Alembic commands ###
